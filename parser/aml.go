// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 3, col: 1, offset: 18},
			expr: &actionExpr{
				pos: position{line: 3, col: 10, offset: 27},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 3, col: 10, offset: 27},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 3, col: 10, offset: 27},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 3, col: 13, offset: 30},
							label: "v1",
							expr: &choiceExpr{
								pos: position{line: 3, col: 17, offset: 34},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 3, col: 17, offset: 34},
										name: "Object",
									},
									&zeroOrMoreExpr{
										pos: position{line: 3, col: 26, offset: 43},
										expr: &ruleRefExpr{
											pos:  position{line: 3, col: 26, offset: 43},
											name: "Field",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 3, col: 34, offset: 51},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Object",
			pos:  position{line: 5, col: 1, offset: 82},
			expr: &actionExpr{
				pos: position{line: 5, col: 11, offset: 92},
				run: (*parser).callonObject1,
				expr: &seqExpr{
					pos: position{line: 5, col: 11, offset: 92},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 5, col: 11, offset: 92},
							name: "LBRACE",
						},
						&labeledExpr{
							pos:   position{line: 5, col: 18, offset: 99},
							label: "v1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5, col: 21, offset: 102},
								expr: &ruleRefExpr{
									pos:  position{line: 5, col: 21, offset: 102},
									name: "Field",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5, col: 28, offset: 109},
							name: "RBRACE",
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 7, col: 1, offset: 144},
			expr: &choiceExpr{
				pos: position{line: 7, col: 10, offset: 153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 7, col: 10, offset: 153},
						name: "IfField",
					},
					&ruleRefExpr{
						pos:  position{line: 7, col: 20, offset: 163},
						name: "ForField",
					},
					&ruleRefExpr{
						pos:  position{line: 7, col: 31, offset: 174},
						name: "LetField",
					},
					&ruleRefExpr{
						pos:  position{line: 7, col: 42, offset: 185},
						name: "FieldField",
					},
					&ruleRefExpr{
						pos:  position{line: 7, col: 55, offset: 198},
						name: "KeyField",
					},
					&ruleRefExpr{
						pos:  position{line: 7, col: 66, offset: 209},
						name: "EmbeddedField",
					},
				},
			},
		},
		{
			name: "EmbeddedField",
			pos:  position{line: 9, col: 1, offset: 224},
			expr: &actionExpr{
				pos: position{line: 9, col: 18, offset: 241},
				run: (*parser).callonEmbeddedField1,
				expr: &seqExpr{
					pos: position{line: 9, col: 18, offset: 241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 9, col: 18, offset: 241},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 9, col: 21, offset: 244},
								name: "Expression",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 9, col: 32, offset: 255},
							expr: &litMatcher{
								pos:        position{line: 9, col: 32, offset: 255},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LetField",
			pos:  position{line: 11, col: 1, offset: 295},
			expr: &actionExpr{
				pos: position{line: 11, col: 13, offset: 307},
				run: (*parser).callonLetField1,
				expr: &seqExpr{
					pos: position{line: 11, col: 13, offset: 307},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 11, col: 13, offset: 307},
							name: "LET",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 17, offset: 311},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 20, offset: 314},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 31, offset: 325},
							name: "ASSIGN",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 38, offset: 332},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 41, offset: 335},
								name: "Expression",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 11, col: 52, offset: 346},
							expr: &litMatcher{
								pos:        position{line: 11, col: 52, offset: 346},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "IfField",
			pos:  position{line: 13, col: 1, offset: 385},
			expr: &actionExpr{
				pos: position{line: 13, col: 12, offset: 396},
				run: (*parser).callonIfField1,
				expr: &seqExpr{
					pos: position{line: 13, col: 12, offset: 396},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 13, col: 12, offset: 396},
							name: "IF",
						},
						&labeledExpr{
							pos:   position{line: 13, col: 15, offset: 399},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 18, offset: 402},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 13, col: 29, offset: 413},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 32, offset: 416},
								name: "Object",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 13, col: 39, offset: 423},
							expr: &litMatcher{
								pos:        position{line: 13, col: 39, offset: 423},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "KeyField",
			pos:  position{line: 15, col: 1, offset: 461},
			expr: &actionExpr{
				pos: position{line: 15, col: 13, offset: 473},
				run: (*parser).callonKeyField1,
				expr: &seqExpr{
					pos: position{line: 15, col: 13, offset: 473},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 15, col: 13, offset: 473},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 15, col: 16, offset: 476},
								name: "Key",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 15, col: 20, offset: 480},
							name: "COLON",
						},
						&labeledExpr{
							pos:   position{line: 15, col: 26, offset: 486},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 15, col: 29, offset: 489},
								name: "Expression",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 15, col: 40, offset: 500},
							expr: &litMatcher{
								pos:        position{line: 15, col: 40, offset: 500},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldField",
			pos:  position{line: 17, col: 1, offset: 536},
			expr: &actionExpr{
				pos: position{line: 17, col: 15, offset: 550},
				run: (*parser).callonFieldField1,
				expr: &seqExpr{
					pos: position{line: 17, col: 15, offset: 550},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 15, offset: 550},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 18, offset: 553},
								name: "Key",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 22, offset: 557},
							name: "COLON",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 28, offset: 563},
							label: "v2",
							expr: &choiceExpr{
								pos: position{line: 17, col: 32, offset: 567},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 32, offset: 567},
										name: "ForField",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 43, offset: 578},
										name: "FieldField",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 56, offset: 591},
										name: "KeyField",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 17, col: 66, offset: 601},
							expr: &litMatcher{
								pos:        position{line: 17, col: 66, offset: 601},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ForField",
			pos:  position{line: 19, col: 1, offset: 642},
			expr: &actionExpr{
				pos: position{line: 19, col: 13, offset: 654},
				run: (*parser).callonForField1,
				expr: &seqExpr{
					pos: position{line: 19, col: 13, offset: 654},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 19, col: 13, offset: 654},
							name: "FOR",
						},
						&labeledExpr{
							pos:   position{line: 19, col: 17, offset: 658},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 20, offset: 661},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 31, offset: 672},
							label: "v2",
							expr: &zeroOrOneExpr{
								pos: position{line: 19, col: 34, offset: 675},
								expr: &seqExpr{
									pos: position{line: 19, col: 35, offset: 676},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 19, col: 35, offset: 676},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 19, col: 41, offset: 682},
											name: "Identifier",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 19, col: 54, offset: 695},
							name: "IN",
						},
						&labeledExpr{
							pos:   position{line: 19, col: 57, offset: 698},
							label: "v3",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 60, offset: 701},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 71, offset: 712},
							label: "v4",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 74, offset: 715},
								name: "Object",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 19, col: 81, offset: 722},
							expr: &litMatcher{
								pos:        position{line: 19, col: 81, offset: 722},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Key",
			pos:  position{line: 21, col: 1, offset: 769},
			expr: &actionExpr{
				pos: position{line: 21, col: 8, offset: 776},
				run: (*parser).callonKey1,
				expr: &labeledExpr{
					pos:   position{line: 21, col: 8, offset: 776},
					label: "v1",
					expr: &choiceExpr{
						pos: position{line: 21, col: 12, offset: 780},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 21, col: 12, offset: 780},
								name: "String",
							},
							&ruleRefExpr{
								pos:  position{line: 21, col: 21, offset: 789},
								name: "Identifier",
							},
							&ruleRefExpr{
								pos:  position{line: 21, col: 34, offset: 802},
								name: "KeyMatch",
							},
						},
					},
				},
			},
		},
		{
			name: "KeyMatch",
			pos:  position{line: 23, col: 1, offset: 837},
			expr: &actionExpr{
				pos: position{line: 23, col: 13, offset: 849},
				run: (*parser).callonKeyMatch1,
				expr: &seqExpr{
					pos: position{line: 23, col: 13, offset: 849},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 13, offset: 849},
							name: "LBRACKET",
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 22, offset: 858},
							name: "REGEQ",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 28, offset: 864},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 31, offset: 867},
								name: "String",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 38, offset: 874},
							name: "RBRACKET",
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 25, col: 1, offset: 913},
			expr: &choiceExpr{
				pos: position{line: 25, col: 10, offset: 922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 25, col: 10, offset: 922},
						name: "Null",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 17, offset: 929},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 27, offset: 939},
						name: "Number",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 36, offset: 948},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 44, offset: 956},
						name: "Object",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 53, offset: 965},
						name: "String",
					},
				},
			},
		},
		{
			name: "Null",
			pos:  position{line: 27, col: 1, offset: 973},
			expr: &actionExpr{
				pos: position{line: 27, col: 9, offset: 981},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 27, col: 9, offset: 981},
					name: "NULL",
				},
			},
		},
		{
			name: "Boolean",
			pos:  position{line: 29, col: 1, offset: 1008},
			expr: &actionExpr{
				pos: position{line: 29, col: 12, offset: 1019},
				run: (*parser).callonBoolean1,
				expr: &labeledExpr{
					pos:   position{line: 29, col: 12, offset: 1019},
					label: "v1",
					expr: &choiceExpr{
						pos: position{line: 29, col: 16, offset: 1023},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 29, col: 16, offset: 1023},
								name: "TRUE",
							},
							&ruleRefExpr{
								pos:  position{line: 29, col: 23, offset: 1030},
								name: "FALSE",
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 31, col: 1, offset: 1063},
			expr: &choiceExpr{
				pos: position{line: 31, col: 11, offset: 1073},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 31, col: 11, offset: 1073},
						name: "TripleString",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 26, offset: 1088},
						name: "SingleString",
					},
				},
			},
		},
		{
			name: "SingleString",
			pos:  position{line: 33, col: 1, offset: 1102},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 1118},
				run: (*parser).callonSingleString1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 1118},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 33, col: 17, offset: 1118},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 33, col: 21, offset: 1122},
							label: "v1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 24, offset: 1125},
								expr: &seqExpr{
									pos: position{line: 33, col: 25, offset: 1126},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 33, col: 25, offset: 1126},
											expr: &litMatcher{
												pos:        position{line: 33, col: 26, offset: 1127},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
										},
										&choiceExpr{
											pos: position{line: 33, col: 31, offset: 1132},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 33, col: 31, offset: 1132},
													name: "Interpolation",
												},
												&ruleRefExpr{
													pos:  position{line: 33, col: 47, offset: 1148},
													name: "Character",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 33, col: 60, offset: 1161},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 64, offset: 1165},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "TripleString",
			pos:  position{line: 34, col: 1, offset: 1195},
			expr: &actionExpr{
				pos: position{line: 34, col: 17, offset: 1211},
				run: (*parser).callonTripleString1,
				expr: &seqExpr{
					pos: position{line: 34, col: 17, offset: 1211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 34, col: 17, offset: 1211},
							val:        "\"\"\"",
							ignoreCase: false,
							want:       "\"\\\"\\\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 34, col: 26, offset: 1220},
							label: "v1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 34, col: 29, offset: 1223},
								expr: &seqExpr{
									pos: position{line: 34, col: 30, offset: 1224},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 34, col: 30, offset: 1224},
											expr: &litMatcher{
												pos:        position{line: 34, col: 31, offset: 1225},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
										},
										&choiceExpr{
											pos: position{line: 34, col: 36, offset: 1230},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 34, col: 36, offset: 1230},
													name: "Interpolation",
												},
												&ruleRefExpr{
													pos:  position{line: 34, col: 52, offset: 1246},
													name: "Character",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 34, col: 65, offset: 1259},
							val:        "\"\"\"",
							ignoreCase: false,
							want:       "\"\\\"\\\"\\\"\"",
						},
						&ruleRefExpr{
							pos:  position{line: 34, col: 74, offset: 1268},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 36, col: 1, offset: 1299},
			expr: &actionExpr{
				pos: position{line: 36, col: 18, offset: 1316},
				run: (*parser).callonInterpolation1,
				expr: &seqExpr{
					pos: position{line: 36, col: 18, offset: 1316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 36, col: 18, offset: 1316},
							val:        "\\(",
							ignoreCase: false,
							want:       "\"\\\\(\"",
						},
						&labeledExpr{
							pos:   position{line: 36, col: 24, offset: 1322},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 27, offset: 1325},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 36, col: 38, offset: 1336},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 38, col: 1, offset: 1361},
			expr: &actionExpr{
				pos: position{line: 38, col: 15, offset: 1375},
				run: (*parser).callonExpression1,
				expr: &seqExpr{
					pos: position{line: 38, col: 15, offset: 1375},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 38, col: 15, offset: 1375},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 18, offset: 1378},
								name: "Selector",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 27, offset: 1387},
							label: "v2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 38, col: 30, offset: 1390},
								expr: &seqExpr{
									pos: position{line: 38, col: 31, offset: 1391},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 38, col: 31, offset: 1391},
											name: "Op",
										},
										&ruleRefExpr{
											pos:  position{line: 38, col: 34, offset: 1394},
											name: "Selector",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Selector",
			pos:  position{line: 40, col: 1, offset: 1441},
			expr: &actionExpr{
				pos: position{line: 40, col: 13, offset: 1453},
				run: (*parser).callonSelector1,
				expr: &seqExpr{
					pos: position{line: 40, col: 13, offset: 1453},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 13, offset: 1453},
							label: "v1",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 16, offset: 1456},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 16, offset: 1456},
									name: "NOT",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 21, offset: 1461},
							label: "v2",
							expr: &choiceExpr{
								pos: position{line: 40, col: 25, offset: 1465},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 40, col: 25, offset: 1465},
										name: "Parens",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 34, offset: 1474},
										name: "ListComprehension",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 54, offset: 1494},
										name: "Value",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 62, offset: 1502},
										name: "Identifier",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 74, offset: 1514},
							label: "v3",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 77, offset: 1517},
								expr: &choiceExpr{
									pos: position{line: 40, col: 78, offset: 1518},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 40, col: 78, offset: 1518},
											name: "DotLookup",
										},
										&ruleRefExpr{
											pos:  position{line: 40, col: 88, offset: 1528},
											name: "IndexLookup",
										},
										&ruleRefExpr{
											pos:  position{line: 40, col: 100, offset: 1540},
											name: "Call",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListComprehension",
			pos:  position{line: 42, col: 1, offset: 1585},
			expr: &actionExpr{
				pos: position{line: 42, col: 22, offset: 1606},
				run: (*parser).callonListComprehension1,
				expr: &seqExpr{
					pos: position{line: 42, col: 22, offset: 1606},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 22, offset: 1606},
							name: "LBRACKET",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 31, offset: 1615},
							name: "FOR",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 35, offset: 1619},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 38, offset: 1622},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 49, offset: 1633},
							label: "v2",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 52, offset: 1636},
								expr: &seqExpr{
									pos: position{line: 42, col: 53, offset: 1637},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 42, col: 53, offset: 1637},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 42, col: 59, offset: 1643},
											name: "Identifier",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 72, offset: 1656},
							name: "IN",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 75, offset: 1659},
							label: "v3",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 78, offset: 1662},
								name: "Expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 89, offset: 1673},
							label: "v4",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 92, offset: 1676},
								name: "Object",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 99, offset: 1683},
							name: "RBRACKET",
						},
					},
				},
			},
		},
		{
			name: "Parens",
			pos:  position{line: 44, col: 1, offset: 1743},
			expr: &actionExpr{
				pos: position{line: 44, col: 11, offset: 1753},
				run: (*parser).callonParens1,
				expr: &seqExpr{
					pos: position{line: 44, col: 11, offset: 1753},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 44, col: 11, offset: 1753},
							name: "LPAREN",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 18, offset: 1760},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 21, offset: 1763},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 32, offset: 1774},
							name: "RPAREN",
						},
					},
				},
			},
		},
		{
			name: "DotLookup",
			pos:  position{line: 46, col: 1, offset: 1809},
			expr: &actionExpr{
				pos: position{line: 46, col: 14, offset: 1822},
				run: (*parser).callonDotLookup1,
				expr: &seqExpr{
					pos: position{line: 46, col: 14, offset: 1822},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 46, col: 14, offset: 1822},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 18, offset: 1826},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 21, offset: 1829},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexLookup",
			pos:  position{line: 47, col: 1, offset: 1870},
			expr: &actionExpr{
				pos: position{line: 47, col: 16, offset: 1885},
				run: (*parser).callonIndexLookup1,
				expr: &seqExpr{
					pos: position{line: 47, col: 16, offset: 1885},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 47, col: 16, offset: 1885},
							name: "LBRACKET",
						},
						&labeledExpr{
							pos:   position{line: 47, col: 25, offset: 1894},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 47, col: 28, offset: 1897},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 47, col: 39, offset: 1908},
							name: "RBRACKET",
						},
					},
				},
			},
		},
		{
			name: "Call",
			pos:  position{line: 48, col: 1, offset: 1949},
			expr: &actionExpr{
				pos: position{line: 48, col: 9, offset: 1957},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 48, col: 9, offset: 1957},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 9, offset: 1957},
							name: "LPAREN",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1964},
							label: "v1",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 19, offset: 1967},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 19, offset: 1967},
									name: "Expression",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 31, offset: 1979},
							label: "v2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 48, col: 34, offset: 1982},
								expr: &seqExpr{
									pos: position{line: 48, col: 35, offset: 1983},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 48, col: 35, offset: 1983},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 48, col: 41, offset: 1989},
											name: "Expression",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 54, offset: 2002},
							name: "RPAREN",
						},
					},
				},
			},
		},
		{
			name: "Op",
			pos:  position{line: 50, col: 1, offset: 2039},
			expr: &actionExpr{
				pos: position{line: 50, col: 7, offset: 2045},
				run: (*parser).callonOp1,
				expr: &labeledExpr{
					pos:   position{line: 50, col: 7, offset: 2045},
					label: "v1",
					expr: &choiceExpr{
						pos: position{line: 50, col: 11, offset: 2049},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 50, col: 11, offset: 2049},
								name: "MINUS",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 19, offset: 2057},
								name: "PLUS",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 26, offset: 2064},
								name: "MUL",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 32, offset: 2070},
								name: "DIVIDE",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 41, offset: 2079},
								name: "AND",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 47, offset: 2085},
								name: "OR",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 52, offset: 2090},
								name: "MERGE",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 60, offset: 2098},
								name: "EQUALS",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 69, offset: 2107},
								name: "NOTEQUALS",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 81, offset: 2119},
								name: "REGEQ",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 89, offset: 2127},
								name: "REGNEQ",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 52, col: 1, offset: 2161},
			expr: &actionExpr{
				pos: position{line: 52, col: 10, offset: 2170},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 52, col: 10, offset: 2170},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 52, col: 10, offset: 2170},
							name: "LBRACKET",
						},
						&labeledExpr{
							pos:   position{line: 52, col: 19, offset: 2179},
							label: "v1",
							expr: &zeroOrOneExpr{
								pos: position{line: 52, col: 22, offset: 2182},
								expr: &ruleRefExpr{
									pos:  position{line: 52, col: 22, offset: 2182},
									name: "Expression",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 34, offset: 2194},
							label: "v2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 37, offset: 2197},
								expr: &seqExpr{
									pos: position{line: 52, col: 38, offset: 2198},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 52, col: 38, offset: 2198},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 52, col: 44, offset: 2204},
											name: "Expression",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 52, col: 57, offset: 2217},
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 57, offset: 2217},
								name: "COMMA",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 52, col: 64, offset: 2224},
							name: "RBRACKET",
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 54, col: 1, offset: 2264},
			expr: &actionExpr{
				pos: position{line: 54, col: 15, offset: 2278},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 54, col: 15, offset: 2278},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 54, col: 15, offset: 2278},
							name: "IdentStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 54, col: 26, offset: 2289},
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 26, offset: 2289},
								name: "IdentCont",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 54, col: 37, offset: 2300},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "IdentStart",
			pos:  position{line: 55, col: 1, offset: 2331},
			expr: &charClassMatcher{
				pos:        position{line: 55, col: 15, offset: 2345},
				val:        "[a-zA-Z_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentCont",
			pos:  position{line: 56, col: 1, offset: 2355},
			expr: &choiceExpr{
				pos: position{line: 56, col: 14, offset: 2368},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 56, col: 14, offset: 2368},
						name: "IdentStart",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 27, offset: 2381},
						name: "Digit",
					},
				},
			},
		},
		{
			name: "Character",
			pos:  position{line: 58, col: 1, offset: 2388},
			expr: &actionExpr{
				pos: position{line: 58, col: 14, offset: 2401},
				run: (*parser).callonCharacter1,
				expr: &choiceExpr{
					pos: position{line: 58, col: 15, offset: 2402},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 58, col: 15, offset: 2402},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 58, col: 15, offset: 2402},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&litMatcher{
									pos:        position{line: 58, col: 20, offset: 2407},
									val:        "u",
									ignoreCase: false,
									want:       "\"u\"",
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 24, offset: 2411},
									name: "Hex",
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 28, offset: 2415},
									name: "Hex",
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 32, offset: 2419},
									name: "Hex",
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 36, offset: 2423},
									name: "Hex",
								},
							},
						},
						&seqExpr{
							pos: position{line: 59, col: 5, offset: 2433},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 2433},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&charClassMatcher{
									pos:        position{line: 59, col: 10, offset: 2438},
									val:        "[bfnrt'\"\\\\]",
									chars:      []rune{'b', 'f', 'n', 'r', 't', '\'', '"', '\\'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&charClassMatcher{
							pos:        position{line: 60, col: 5, offset: 2456},
							val:        "[\\n\\r]",
							chars:      []rune{'\n', '\r'},
							ignoreCase: false,
							inverted:   false,
						},
						&charClassMatcher{
							pos:        position{line: 61, col: 5, offset: 2469},
							val:        "[\\u0020-\\u10FFFF]",
							chars:      []rune{'F', 'F'},
							ranges:     []rune{' ', 'ჿ'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 63, col: 1, offset: 2510},
			expr: &choiceExpr{
				pos: position{line: 63, col: 8, offset: 2517},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 63, col: 8, offset: 2517},
						name: "Digit",
					},
					&charClassMatcher{
						pos:        position{line: 63, col: 16, offset: 2525},
						val:        "[a-fA-F]",
						ranges:     []rune{'a', 'f', 'A', 'F'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 64, col: 1, offset: 2534},
			expr: &choiceExpr{
				pos: position{line: 64, col: 10, offset: 2543},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 64, col: 10, offset: 2543},
						val:        "0",
						ignoreCase: false,
						want:       "\"0\"",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 16, offset: 2549},
						name: "OneNine",
					},
				},
			},
		},
		{
			name: "OneNine",
			pos:  position{line: 65, col: 1, offset: 2557},
			expr: &charClassMatcher{
				pos:        position{line: 65, col: 12, offset: 2568},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Number",
			pos:  position{line: 67, col: 1, offset: 2575},
			expr: &actionExpr{
				pos: position{line: 67, col: 11, offset: 2585},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 67, col: 11, offset: 2585},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 11, offset: 2585},
							name: "Integer",
						},
						&zeroOrOneExpr{
							pos: position{line: 67, col: 19, offset: 2593},
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 19, offset: 2593},
								name: "Fraction",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 67, col: 29, offset: 2603},
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 29, offset: 2603},
								name: "Exponent",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 67, col: 39, offset: 2613},
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 39, offset: 2613},
								name: "Suffix",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 47, offset: 2621},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 68, col: 1, offset: 2647},
			expr: &choiceExpr{
				pos: position{line: 68, col: 12, offset: 2658},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 68, col: 12, offset: 2658},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 68, col: 12, offset: 2658},
								name: "OneNine",
							},
							&oneOrMoreExpr{
								pos: position{line: 68, col: 20, offset: 2666},
								expr: &ruleRefExpr{
									pos:  position{line: 68, col: 20, offset: 2666},
									name: "DigitUnderscore",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 39, offset: 2685},
						name: "Digit",
					},
					&seqExpr{
						pos: position{line: 68, col: 47, offset: 2693},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 68, col: 47, offset: 2693},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 51, offset: 2697},
								name: "OneNine",
							},
							&oneOrMoreExpr{
								pos: position{line: 68, col: 59, offset: 2705},
								expr: &ruleRefExpr{
									pos:  position{line: 68, col: 59, offset: 2705},
									name: "DigitUnderscore",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 68, col: 78, offset: 2724},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 68, col: 78, offset: 2724},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 82, offset: 2728},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "DigitUnderscore",
			pos:  position{line: 69, col: 1, offset: 2734},
			expr: &choiceExpr{
				pos: position{line: 69, col: 20, offset: 2753},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 69, col: 20, offset: 2753},
						val:        "_",
						ignoreCase: false,
						want:       "\"_\"",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 26, offset: 2759},
						name: "Digit",
					},
				},
			},
		},
		{
			name: "Fraction",
			pos:  position{line: 70, col: 1, offset: 2765},
			expr: &seqExpr{
				pos: position{line: 70, col: 13, offset: 2777},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 70, col: 13, offset: 2777},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 70, col: 17, offset: 2781},
						expr: &ruleRefExpr{
							pos:  position{line: 70, col: 17, offset: 2781},
							name: "Digit",
						},
					},
				},
			},
		},
		{
			name: "Exponent",
			pos:  position{line: 71, col: 1, offset: 2788},
			expr: &seqExpr{
				pos: position{line: 71, col: 13, offset: 2800},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 71, col: 13, offset: 2800},
						val:        "[Ee]",
						chars:      []rune{'E', 'e'},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrOneExpr{
						pos: position{line: 71, col: 18, offset: 2805},
						expr: &ruleRefExpr{
							pos:  position{line: 71, col: 18, offset: 2805},
							name: "Sign",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 71, col: 24, offset: 2811},
						expr: &ruleRefExpr{
							pos:  position{line: 71, col: 24, offset: 2811},
							name: "Digit",
						},
					},
				},
			},
		},
		{
			name: "Sign",
			pos:  position{line: 72, col: 1, offset: 2818},
			expr: &charClassMatcher{
				pos:        position{line: 72, col: 9, offset: 2826},
				val:        "[-+]",
				chars:      []rune{'-', '+'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Suffix",
			pos:  position{line: 73, col: 1, offset: 2831},
			expr: &choiceExpr{
				pos: position{line: 73, col: 11, offset: 2841},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2841},
						name: "BiSuffix",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 22, offset: 2852},
						name: "DecSuffix",
					},
				},
			},
		},
		{
			name: "BiSuffix",
			pos:  position{line: 74, col: 1, offset: 2862},
			expr: &seqExpr{
				pos: position{line: 74, col: 13, offset: 2874},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 74, col: 13, offset: 2874},
						val:        "[KkMmGgTtPpEeZzYy]",
						chars:      []rune{'K', 'k', 'M', 'm', 'G', 'g', 'T', 't', 'P', 'p', 'E', 'e', 'Z', 'z', 'Y', 'y'},
						ignoreCase: false,
						inverted:   false,
					},
					&litMatcher{
						pos:        position{line: 74, col: 32, offset: 2893},
						val:        "i",
						ignoreCase: false,
						want:       "\"i\"",
					},
				},
			},
		},
		{
			name: "DecSuffix",
			pos:  position{line: 75, col: 1, offset: 2897},
			expr: &charClassMatcher{
				pos:        position{line: 75, col: 14, offset: 2910},
				val:        "[KkMmGgTtPpEeZzYy]",
				chars:      []rune{'K', 'k', 'M', 'm', 'G', 'g', 'T', 't', 'P', 'p', 'E', 'e', 'Z', 'z', 'Y', 'y'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "__",
			pos:  position{line: 77, col: 1, offset: 2930},
			expr: &seqExpr{
				pos: position{line: 77, col: 7, offset: 2936},
				exprs: []interface{}{
					&labeledExpr{
						pos:   position{line: 77, col: 7, offset: 2936},
						label: "v1",
						expr: &zeroOrMoreExpr{
							pos: position{line: 77, col: 10, offset: 2939},
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 10, offset: 2939},
								name: "_",
							},
						},
					},
					&stateCodeExpr{
						pos: position{line: 77, col: 13, offset: 2942},
						run: (*parser).callon__5,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 78, col: 1, offset: 2972},
			expr: &actionExpr{
				pos: position{line: 78, col: 6, offset: 2977},
				run: (*parser).callon_1,
				expr: &labeledExpr{
					pos:   position{line: 78, col: 6, offset: 2977},
					label: "v1",
					expr: &choiceExpr{
						pos: position{line: 78, col: 10, offset: 2981},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 78, col: 10, offset: 2981},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
							&litMatcher{
								pos:        position{line: 78, col: 16, offset: 2987},
								val:        "\t",
								ignoreCase: false,
								want:       "\"\\t\"",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 23, offset: 2994},
								name: "EOL",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 29, offset: 3000},
								name: "Comment",
							},
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 79, col: 1, offset: 3029},
			expr: &actionExpr{
				pos: position{line: 79, col: 12, offset: 3040},
				run: (*parser).callonComment1,
				expr: &seqExpr{
					pos: position{line: 79, col: 12, offset: 3040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 79, col: 12, offset: 3040},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 79, col: 17, offset: 3045},
							expr: &seqExpr{
								pos: position{line: 79, col: 18, offset: 3046},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 79, col: 18, offset: 3046},
										expr: &ruleRefExpr{
											pos:  position{line: 79, col: 19, offset: 3047},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 79, col: 23, offset: 3051,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 27, offset: 3055},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 80, col: 1, offset: 3079},
			expr: &litMatcher{
				pos:        position{line: 80, col: 10, offset: 3088},
				val:        "\"",
				ignoreCase: false,
				want:       "\"\\\"\"",
			},
		},
		{
			name: "EOL",
			pos:  position{line: 81, col: 1, offset: 3092},
			expr: &choiceExpr{
				pos: position{line: 81, col: 8, offset: 3099},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 81, col: 8, offset: 3099},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 81, col: 17, offset: 3108},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 81, col: 24, offset: 3115},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 82, col: 1, offset: 3120},
			expr: &notExpr{
				pos: position{line: 82, col: 8, offset: 3127},
				expr: &anyMatcher{
					line: 82, col: 9, offset: 3128,
				},
			},
		},
		{
			name: "NULL",
			pos:  position{line: 85, col: 1, offset: 3181},
			expr: &actionExpr{
				pos: position{line: 85, col: 9, offset: 3189},
				run: (*parser).callonNULL1,
				expr: &seqExpr{
					pos: position{line: 85, col: 9, offset: 3189},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 85, col: 9, offset: 3189},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
						&ruleRefExpr{
							pos:  position{line: 85, col: 16, offset: 3196},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "TRUE",
			pos:  position{line: 86, col: 1, offset: 3227},
			expr: &actionExpr{
				pos: position{line: 86, col: 9, offset: 3235},
				run: (*parser).callonTRUE1,
				expr: &seqExpr{
					pos: position{line: 86, col: 9, offset: 3235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 86, col: 9, offset: 3235},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 16, offset: 3242},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "FALSE",
			pos:  position{line: 87, col: 1, offset: 3273},
			expr: &actionExpr{
				pos: position{line: 87, col: 10, offset: 3282},
				run: (*parser).callonFALSE1,
				expr: &seqExpr{
					pos: position{line: 87, col: 10, offset: 3282},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 87, col: 10, offset: 3282},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 18, offset: 3290},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "LET",
			pos:  position{line: 88, col: 1, offset: 3321},
			expr: &actionExpr{
				pos: position{line: 88, col: 8, offset: 3328},
				run: (*parser).callonLET1,
				expr: &seqExpr{
					pos: position{line: 88, col: 8, offset: 3328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 88, col: 8, offset: 3328},
							val:        "let",
							ignoreCase: false,
							want:       "\"let\"",
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 14, offset: 3334},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "ASSIGN",
			pos:  position{line: 89, col: 1, offset: 3365},
			expr: &actionExpr{
				pos: position{line: 89, col: 11, offset: 3375},
				run: (*parser).callonASSIGN1,
				expr: &seqExpr{
					pos: position{line: 89, col: 11, offset: 3375},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 89, col: 11, offset: 3375},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 15, offset: 3379},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 90, col: 1, offset: 3410},
			expr: &actionExpr{
				pos: position{line: 90, col: 8, offset: 3417},
				run: (*parser).callonNOT1,
				expr: &seqExpr{
					pos: position{line: 90, col: 8, offset: 3417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 90, col: 8, offset: 3417},
							val:        "!",
							ignoreCase: false,
							want:       "\"!\"",
						},
						&ruleRefExpr{
							pos:  position{line: 90, col: 12, offset: 3421},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "IF",
			pos:  position{line: 91, col: 1, offset: 3452},
			expr: &actionExpr{
				pos: position{line: 91, col: 7, offset: 3458},
				run: (*parser).callonIF1,
				expr: &seqExpr{
					pos: position{line: 91, col: 7, offset: 3458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 7, offset: 3458},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 12, offset: 3463},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "IN",
			pos:  position{line: 92, col: 1, offset: 3494},
			expr: &actionExpr{
				pos: position{line: 92, col: 7, offset: 3500},
				run: (*parser).callonIN1,
				expr: &seqExpr{
					pos: position{line: 92, col: 7, offset: 3500},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 92, col: 7, offset: 3500},
							val:        "in",
							ignoreCase: false,
							want:       "\"in\"",
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 12, offset: 3505},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "FOR",
			pos:  position{line: 93, col: 1, offset: 3536},
			expr: &actionExpr{
				pos: position{line: 93, col: 8, offset: 3543},
				run: (*parser).callonFOR1,
				expr: &seqExpr{
					pos: position{line: 93, col: 8, offset: 3543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 93, col: 8, offset: 3543},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 14, offset: 3549},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 94, col: 1, offset: 3580},
			expr: &actionExpr{
				pos: position{line: 94, col: 10, offset: 3589},
				run: (*parser).callonCOMMA1,
				expr: &seqExpr{
					pos: position{line: 94, col: 10, offset: 3589},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 94, col: 10, offset: 3589},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 14, offset: 3593},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "LPAREN",
			pos:  position{line: 95, col: 1, offset: 3624},
			expr: &actionExpr{
				pos: position{line: 95, col: 11, offset: 3634},
				run: (*parser).callonLPAREN1,
				expr: &seqExpr{
					pos: position{line: 95, col: 11, offset: 3634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 95, col: 11, offset: 3634},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 15, offset: 3638},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RPAREN",
			pos:  position{line: 96, col: 1, offset: 3669},
			expr: &actionExpr{
				pos: position{line: 96, col: 11, offset: 3679},
				run: (*parser).callonRPAREN1,
				expr: &seqExpr{
					pos: position{line: 96, col: 11, offset: 3679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 96, col: 11, offset: 3679},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 15, offset: 3683},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "LBRACE",
			pos:  position{line: 97, col: 1, offset: 3714},
			expr: &actionExpr{
				pos: position{line: 97, col: 11, offset: 3724},
				run: (*parser).callonLBRACE1,
				expr: &seqExpr{
					pos: position{line: 97, col: 11, offset: 3724},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 97, col: 11, offset: 3724},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 15, offset: 3728},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RBRACE",
			pos:  position{line: 98, col: 1, offset: 3759},
			expr: &actionExpr{
				pos: position{line: 98, col: 11, offset: 3769},
				run: (*parser).callonRBRACE1,
				expr: &seqExpr{
					pos: position{line: 98, col: 11, offset: 3769},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 98, col: 11, offset: 3769},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 15, offset: 3773},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "LBRACKET",
			pos:  position{line: 99, col: 1, offset: 3804},
			expr: &actionExpr{
				pos: position{line: 99, col: 13, offset: 3816},
				run: (*parser).callonLBRACKET1,
				expr: &seqExpr{
					pos: position{line: 99, col: 13, offset: 3816},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 13, offset: 3816},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 17, offset: 3820},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RBRACKET",
			pos:  position{line: 100, col: 1, offset: 3851},
			expr: &actionExpr{
				pos: position{line: 100, col: 13, offset: 3863},
				run: (*parser).callonRBRACKET1,
				expr: &seqExpr{
					pos: position{line: 100, col: 13, offset: 3863},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 100, col: 13, offset: 3863},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 17, offset: 3867},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "MINUS",
			pos:  position{line: 101, col: 1, offset: 3898},
			expr: &actionExpr{
				pos: position{line: 101, col: 10, offset: 3907},
				run: (*parser).callonMINUS1,
				expr: &seqExpr{
					pos: position{line: 101, col: 10, offset: 3907},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 101, col: 10, offset: 3907},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 14, offset: 3911},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "MUL",
			pos:  position{line: 102, col: 1, offset: 3942},
			expr: &actionExpr{
				pos: position{line: 102, col: 8, offset: 3949},
				run: (*parser).callonMUL1,
				expr: &seqExpr{
					pos: position{line: 102, col: 8, offset: 3949},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 8, offset: 3949},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 12, offset: 3953},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "PLUS",
			pos:  position{line: 103, col: 1, offset: 3984},
			expr: &actionExpr{
				pos: position{line: 103, col: 9, offset: 3992},
				run: (*parser).callonPLUS1,
				expr: &seqExpr{
					pos: position{line: 103, col: 9, offset: 3992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 103, col: 9, offset: 3992},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 13, offset: 3996},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DIVIDE",
			pos:  position{line: 104, col: 1, offset: 4027},
			expr: &actionExpr{
				pos: position{line: 104, col: 11, offset: 4037},
				run: (*parser).callonDIVIDE1,
				expr: &seqExpr{
					pos: position{line: 104, col: 11, offset: 4037},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 11, offset: 4037},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 15, offset: 4041},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "MERGE",
			pos:  position{line: 105, col: 1, offset: 4072},
			expr: &actionExpr{
				pos: position{line: 105, col: 10, offset: 4081},
				run: (*parser).callonMERGE1,
				expr: &seqExpr{
					pos: position{line: 105, col: 10, offset: 4081},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 105, col: 10, offset: 4081},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 14, offset: 4085},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EQUALS",
			pos:  position{line: 106, col: 1, offset: 4116},
			expr: &actionExpr{
				pos: position{line: 106, col: 11, offset: 4126},
				run: (*parser).callonEQUALS1,
				expr: &seqExpr{
					pos: position{line: 106, col: 11, offset: 4126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 106, col: 11, offset: 4126},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 16, offset: 4131},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "NOTEQUALS",
			pos:  position{line: 107, col: 1, offset: 4162},
			expr: &actionExpr{
				pos: position{line: 107, col: 14, offset: 4175},
				run: (*parser).callonNOTEQUALS1,
				expr: &seqExpr{
					pos: position{line: 107, col: 14, offset: 4175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 14, offset: 4175},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 19, offset: 4180},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 108, col: 1, offset: 4211},
			expr: &actionExpr{
				pos: position{line: 108, col: 8, offset: 4218},
				run: (*parser).callonAND1,
				expr: &seqExpr{
					pos: position{line: 108, col: 8, offset: 4218},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 8, offset: 4218},
							val:        "&&",
							ignoreCase: false,
							want:       "\"&&\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 13, offset: 4223},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 109, col: 1, offset: 4254},
			expr: &actionExpr{
				pos: position{line: 109, col: 7, offset: 4260},
				run: (*parser).callonOR1,
				expr: &seqExpr{
					pos: position{line: 109, col: 7, offset: 4260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 109, col: 7, offset: 4260},
							val:        "||",
							ignoreCase: false,
							want:       "\"||\"",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 12, offset: 4265},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "COLON",
			pos:  position{line: 110, col: 1, offset: 4296},
			expr: &actionExpr{
				pos: position{line: 110, col: 10, offset: 4305},
				run: (*parser).callonCOLON1,
				expr: &seqExpr{
					pos: position{line: 110, col: 10, offset: 4305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 110, col: 10, offset: 4305},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 14, offset: 4309},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "REGEQ",
			pos:  position{line: 111, col: 1, offset: 4340},
			expr: &actionExpr{
				pos: position{line: 111, col: 10, offset: 4349},
				run: (*parser).callonREGEQ1,
				expr: &seqExpr{
					pos: position{line: 111, col: 10, offset: 4349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 10, offset: 4349},
							val:        "=~",
							ignoreCase: false,
							want:       "\"=~\"",
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 15, offset: 4354},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "REGNEQ",
			pos:  position{line: 112, col: 1, offset: 4385},
			expr: &actionExpr{
				pos: position{line: 112, col: 11, offset: 4395},
				run: (*parser).callonREGNEQ1,
				expr: &seqExpr{
					pos: position{line: 112, col: 11, offset: 4395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 11, offset: 4395},
							val:        "!~",
							ignoreCase: false,
							want:       "\"!~\"",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 16, offset: 4400},
							name: "__",
						},
					},
				},
			},
		},
	},
}

func (c *current) onInput1(v1 interface{}) (interface{}, error) {
	return toInput(v1, c)
}

func (p *parser) callonInput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["v1"])
}

func (c *current) onObject1(v1 interface{}) (interface{}, error) {
	return toObject(v1, c)
}

func (p *parser) callonObject1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject1(stack["v1"])
}

func (c *current) onEmbeddedField1(v1 interface{}) (interface{}, error) {
	return toEmbeddedField(v1, c)
}

func (p *parser) callonEmbeddedField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmbeddedField1(stack["v1"])
}

func (c *current) onLetField1(v1, v2 interface{}) (interface{}, error) {
	return toLetField(v1, v2, c)
}

func (p *parser) callonLetField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetField1(stack["v1"], stack["v2"])
}

func (c *current) onIfField1(v1, v2 interface{}) (interface{}, error) {
	return toIfField(v1, v2, c)
}

func (p *parser) callonIfField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfField1(stack["v1"], stack["v2"])
}

func (c *current) onKeyField1(v1, v2 interface{}) (interface{}, error) {
	return toField(v1, v2, c)
}

func (p *parser) callonKeyField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyField1(stack["v1"], stack["v2"])
}

func (c *current) onFieldField1(v1, v2 interface{}) (interface{}, error) {
	return toFieldField(v1, v2, c)
}

func (p *parser) callonFieldField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldField1(stack["v1"], stack["v2"])
}

func (c *current) onForField1(v1, v2, v3, v4 interface{}) (interface{}, error) {
	return toForField(v1, v2, v3, v4, c)
}

func (p *parser) callonForField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForField1(stack["v1"], stack["v2"], stack["v3"], stack["v4"])
}

func (c *current) onKey1(v1 interface{}) (interface{}, error) {
	return toKey(v1, c)
}

func (p *parser) callonKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKey1(stack["v1"])
}

func (c *current) onKeyMatch1(v1 interface{}) (interface{}, error) {
	return toKeyMatch(v1, c)
}

func (p *parser) callonKeyMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyMatch1(stack["v1"])
}

func (c *current) onNull1() (interface{}, error) {
	return toNull(c)
}

func (p *parser) callonNull1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onBoolean1(v1 interface{}) (interface{}, error) {
	return toBool(v1, c)
}

func (p *parser) callonBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean1(stack["v1"])
}

func (c *current) onSingleString1(v1 interface{}) (interface{}, error) {
	return toString(v1, c)
}

func (p *parser) callonSingleString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleString1(stack["v1"])
}

func (c *current) onTripleString1(v1 interface{}) (interface{}, error) {
	return toString(v1, c)
}

func (p *parser) callonTripleString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTripleString1(stack["v1"])
}

func (c *current) onInterpolation1(v1 interface{}) (interface{}, error) {
	return noop(v1)
}

func (p *parser) callonInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation1(stack["v1"])
}

func (c *current) onExpression1(v1, v2 interface{}) (interface{}, error) {
	return toExpression(v1, v2, c)
}

func (p *parser) callonExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["v1"], stack["v2"])
}

func (c *current) onSelector1(v1, v2, v3 interface{}) (interface{}, error) {
	return toSelector(v1, v2, v3, c)
}

func (p *parser) callonSelector1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector1(stack["v1"], stack["v2"], stack["v3"])
}

func (c *current) onListComprehension1(v1, v2, v3, v4 interface{}) (interface{}, error) {
	return toListComprehension(v1, v2, v3, v4, c)
}

func (p *parser) callonListComprehension1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListComprehension1(stack["v1"], stack["v2"], stack["v3"], stack["v4"])
}

func (c *current) onParens1(v1 interface{}) (interface{}, error) {
	return toParens(v1, c)
}

func (p *parser) callonParens1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParens1(stack["v1"])
}

func (c *current) onDotLookup1(v1 interface{}) (interface{}, error) {
	return toDotLookup(v1, c)
}

func (p *parser) callonDotLookup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotLookup1(stack["v1"])
}

func (c *current) onIndexLookup1(v1 interface{}) (interface{}, error) {
	return toIndexLookup(v1, c)
}

func (p *parser) callonIndexLookup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexLookup1(stack["v1"])
}

func (c *current) onCall1(v1, v2 interface{}) (interface{}, error) {
	return toCall(v1, v2, c)
}

func (p *parser) callonCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["v1"], stack["v2"])
}

func (c *current) onOp1(v1 interface{}) (interface{}, error) {
	return newOp(v1, c)
}

func (p *parser) callonOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOp1(stack["v1"])
}

func (c *current) onArray1(v1, v2 interface{}) (interface{}, error) {
	return toArray(v1, v2, c)
}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["v1"], stack["v2"])
}

func (c *current) onIdentifier1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onCharacter1() (interface{}, error) {
	return toChar(c)
}

func (p *parser) callonCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharacter1()
}

func (c *current) onNumber1() (interface{}, error) {
	return toNumber(c)
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) on__5(v1 interface{}) error {
	return whitespace(v1, c)
}

func (p *parser) callon__5() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on__5(stack["v1"])
}

func (c *current) on_1(v1 interface{}) (interface{}, error) {
	return space(c)
}

func (p *parser) callon_1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1(stack["v1"])
}

func (c *current) onComment1() (interface{}, error) {
	return space(c)
}

func (p *parser) callonComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1()
}

func (c *current) onNULL1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonNULL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNULL1()
}

func (c *current) onTRUE1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonTRUE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTRUE1()
}

func (c *current) onFALSE1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonFALSE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFALSE1()
}

func (c *current) onLET1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonLET1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLET1()
}

func (c *current) onASSIGN1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonASSIGN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASSIGN1()
}

func (c *current) onNOT1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonNOT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNOT1()
}

func (c *current) onIF1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonIF1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIF1()
}

func (c *current) onIN1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIN1()
}

func (c *current) onFOR1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonFOR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFOR1()
}

func (c *current) onCOMMA1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonCOMMA1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMA1()
}

func (c *current) onLPAREN1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonLPAREN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPAREN1()
}

func (c *current) onRPAREN1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonRPAREN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPAREN1()
}

func (c *current) onLBRACE1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonLBRACE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRACE1()
}

func (c *current) onRBRACE1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonRBRACE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRACE1()
}

func (c *current) onLBRACKET1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonLBRACKET1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRACKET1()
}

func (c *current) onRBRACKET1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonRBRACKET1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRACKET1()
}

func (c *current) onMINUS1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonMINUS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMINUS1()
}

func (c *current) onMUL1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonMUL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMUL1()
}

func (c *current) onPLUS1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonPLUS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPLUS1()
}

func (c *current) onDIVIDE1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonDIVIDE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIVIDE1()
}

func (c *current) onMERGE1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonMERGE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMERGE1()
}

func (c *current) onEQUALS1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonEQUALS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUALS1()
}

func (c *current) onNOTEQUALS1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonNOTEQUALS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNOTEQUALS1()
}

func (c *current) onAND1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonAND1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAND1()
}

func (c *current) onOR1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonOR1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOR1()
}

func (c *current) onCOLON1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonCOLON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOLON1()
}

func (c *current) onREGEQ1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonREGEQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onREGEQ1()
}

func (c *current) onREGNEQ1() (interface{}, error) {
	return currentString(c)
}

func (p *parser) callonREGNEQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onREGNEQ1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
