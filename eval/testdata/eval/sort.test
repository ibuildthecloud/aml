let defaultComparator: {
    args: {left: 0, right: 1}
    return: args.left < args.right
}

let merge: {
    args: {
        left: []
        right: []
        less: defaultComparator
    }
    if len(args.left) == 0 {
        return: args.right
    } else if len(args.right) == 0 {
        return: args.left
    } else if args.less(args.left[0], args.right[0]) {
       return: [args.left[0]] + [args.right[0]] + merge(args.left[1:len(args.left)], args.right[1:len(args.right)], args.less)
    } else {
       return: [args.right[0]] + [args.left[0]] + merge(args.right[1:len(args.right)], args.left[1:len(args.left)], args.less)
    }
}

let sort: {
    args: {
        list: []
        less: defaultComparator
    }

    if len(args.list) <= 1 {
        return: args.list
    } else if len(args.list) == 2 {
        if args.less(args.list[0], args.list[1]) {
            return: args.list
        } else {
            return: [args.list[1], args.list[0]]
        }
    } else {
        l: len(args.list)
        return: merge(sort(args.list[0:l/2], args.less), sort(args.list[l/2:l], args.less), args.less)
    }
}

x: sort([3, 2, 5, 1, 7])
---
{
    "x": [
        1,
        2,
        3,
        5,
        7
    ]
}